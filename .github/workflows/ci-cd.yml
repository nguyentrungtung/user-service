# name: CI/CD Pipeline

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   test:
#     runs-on: ubuntu-latest
    
#     services:
#       postgres:
#         image: postgres:15
#         env:
#           POSTGRES_PASSWORD: postgres
#           POSTGRES_USER: postgres
#           POSTGRES_DB: postgres
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 5432:5432
      
#       redis:
#         image: redis:7.2
#         options: >-
#           --health-cmd "redis-cli ping"
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 6379:6379

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up JDK 21
#       uses: actions/setup-java@v4
#       with:
#         java-version: '21'
#         distribution: 'temurin'

#     - name: Cache Maven dependencies
#       uses: actions/cache@v3
#       with:
#         path: ~/.m2
#         key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#         restore-keys: ${{ runner.os }}-m2

#     - name: Run tests
#       env:
#         POSTGRES_URL: jdbc:postgresql://localhost:5432/postgres
#         POSTGRES_USERNAME: postgres
#         POSTGRES_PASSWORD: postgres
#         REDIS_HOST: localhost
#         REDIS_PORT: 6379
#         SPRING_PROFILES_ACTIVE: test
#       run: |
#         if [ -f "mvnw" ]; then
#           ./mvnw clean test -Dspring.profiles.active=test
#         elif [ -f "gradlew" ]; then
#           ./gradlew test -Dspring.profiles.active=test
#         else
#           mvn clean test -Dspring.profiles.active=test
#         fi

#     - name: Generate test report
#       uses: dorny/test-reporter@v1
#       if: success() || failure()
#       with:
#         name: Maven Tests
#         path: target/surefire-reports/*.xml
#         reporter: java-junit
#         fail-on-error: true

#   build:
#     needs: test
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up JDK 21
#       uses: actions/setup-java@v4
#       with:
#         java-version: '21'
#         distribution: 'temurin'

#     - name: Cache Maven dependencies
#       uses: actions/cache@v3
#       with:
#         path: ~/.m2
#         key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#         restore-keys: ${{ runner.os }}-m2

#     - name: Build application
#       run: |
#         if [ -f "mvnw" ]; then
#           ./mvnw clean package -DskipTests
#         elif [ -f "gradlew" ]; then
#           ./gradlew build -x test
#         else
#           mvn clean package -DskipTests
#         fi

#     - name: Build Docker image
#       run: |
#         docker build -t java-postgres-app:${{ github.sha }} .
#         docker tag java-postgres-app:${{ github.sha }} java-postgres-app:latest

#     - name: Save Docker image
#       run: |
#         docker save java-postgres-app:latest | gzip > java-postgres-app.tar.gz

#     - name: Upload build artifacts
#       uses: actions/upload-artifact@v3
#       with:
#         name: build-artifacts
#         path: |
#           target/*.jar
#           java-postgres-app.tar.gz
#         retention-days: 30

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
#     environment: production
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Download build artifacts
#       uses: actions/download-artifact@v3
#       with:
#         name: build-artifacts

#     - name: Load Docker image
#       run: |
#         docker load < java-postgres-app.tar.gz

#     # Uncomment and configure for your deployment target
#     # - name: Deploy to staging
#     #   run: |
#     #     echo "Deploying to staging environment..."
#     #     # Add your deployment commands here
    
#     # - name: Deploy to production
#     #   if: github.ref == 'refs/heads/main'
#     #   run: |
#     #     echo "Deploying to production environment..."
#     #     # Add your production deployment commands here

#     - name: Notify deployment status
#       run: |
#         echo "Deployment completed successfully!"
#         echo "Application version: ${{ github.sha }}"
#         echo "Deployed at: $(date)"

#   security-scan:
#     runs-on: ubuntu-latest
#     if: github.event_name == 'pull_request'
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Run Trivy vulnerability scanner
#       uses: aquasecurity/trivy-action@master
#       with:
#         scan-type: 'fs'
#         scan-ref: '.'
#         format: 'sarif'
#         output: 'trivy-results.sarif'

#     - name: Upload Trivy scan results
#       uses: github/codeql-action/upload-sarif@v2
#       if: always()
#       with:
#         sarif_file: 'trivy-results.sarif'
